pub struct Solution;

use std::collections::HashMap;
const ANSWER_MOD: i64 = 1_000_000_007;
impl Solution {
    pub fn sum_subseq_widths(mut nums: Vec<i32>) -> i32 {
        let n = nums.len();
        nums.sort();

        let mut pow2: Vec<i64> = vec![1; n];
        pow2[0] = 1;
        for i in 1..n {
            pow2[i] = pow2[i - 1] * 2 % 1_000_000_007;
        }

        let mut ans: i64 = 0;
        for i in 0..n {
            ans = (ans + (pow2[i] - pow2[n - 1 - i]) * (nums[i] as i64)) % ANSWER_MOD;
        }

        return ans as i32;
    }

    pub fn sum_subseq_widths1(nums: Vec<i32>) -> i32 {
        let n = nums.len();

        let mut cur: HashMap<(u64, u64), u64> = HashMap::new();

        for x in nums {
            let x = x as u64;

            let mut next: HashMap<(u64, u64), u64> = cur.clone();
            for ((min_b, max_b), count) in &cur {
                let new_min = *min_b.min(&x);
                let new_max = *max_b.max(&x);

                let entry = next.entry((new_min, new_max)).or_insert(0);
                *entry = (*entry + count) % ANSWER_MOD as u64;
            }
            let entry = next.entry((x, x)).or_insert(0);
            *entry = (*entry + 1);

            cur = next;
        }

        let mut t = cur
            .iter()
            .map(|((min_b, max_b), count)| (max_b - min_b, *count))
            .collect::<Vec<(u64, u64)>>();

        t.sort_by(|a, b| b.1.cmp(&a.1));
        println!(
            "top by count{:?}",
            t.iter().take(5).collect::<Vec<&(u64, u64)>>()
        );
        t.sort_by(|a, b| b.0.cmp(&a.0));
        println!(
            "top by diff{:?}",
            t.iter().take(5).collect::<Vec<&(u64, u64)>>()
        );
        println!("size:{}", cur.len());

        let mut res_sum: u64 = 0;

        for ((min_b, max_b), count) in cur {
            if min_b != max_b {
                res_sum += (max_b - min_b) * count;
                res_sum %= ANSWER_MOD as u64;
            }
        }
        return res_sum as i32;
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    // [2, 1, 3]
    // [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].
    // 0,     0,   0,     1,     1,     2,       2.
    #[test]
    fn problem_891_ex1() {
        assert_eq!(Solution::sum_subseq_widths(vec![2, 1, 3]), 6);
    }

    #[test]
    fn problem_891_ex2() {
        assert_eq!(Solution::sum_subseq_widths(vec![2]), 0);
    }

    // [2, 1, 3, 4]
    // [2,1], [2,3], [1,3], [3,4], [2,1,3], [1,3,4], [2,1,3,4],
    //     1,     1,     2,    1,        2,       3,         3,
    #[test]
    fn problem_891_ex3() {
        assert_eq!(
            Solution::sum_subseq_widths(vec![2, 1, 3, 4]),
            1 * 3 + 2 * 4 + 3 * 4
        );
    }

    #[test]
    fn problem_891_ex4() {
        assert_eq!(
            Solution::sum_subseq_widths(vec![
                581, 800, 800, 873, 342, 955, 42, 5, 606, 837, 198, 10, 378, 142, 493, 547, 993,
                326, 217, 319, 234, 55, 816, 168, 761, 600, 162, 719, 435, 289, 506, 238, 150, 507,
                995, 278, 342, 334, 830, 483, 77, 444, 812, 710, 193, 186, 751, 122, 709, 20, 998,
                589, 605, 180, 146, 905, 228, 783, 475, 86, 230, 720, 536, 264, 590, 287, 377, 956,
                208, 285, 270, 854, 386, 647, 21, 995, 472, 453, 185, 616, 589, 700, 228, 576, 558,
                527, 95, 184, 120, 162, 212, 334, 196, 268, 697, 731, 391, 942, 898, 231, 101, 789,
                7, 380, 217, 30, 715, 694, 644, 383, 196, 867, 4, 668, 813, 351, 84, 373, 174, 133,
                651, 756, 576, 975, 91, 738, 109, 128, 406, 530, 843, 492, 856, 781, 829, 701, 665,
                851, 514, 65, 70, 18, 549, 667, 460, 139, 823, 154, 400, 776, 383, 70, 538, 966,
                948, 912, 83, 721, 803, 969, 764, 999, 925, 995, 367, 743, 827, 407, 688, 563, 683,
                524, 964, 957, 534, 156, 135, 299, 550, 315, 807, 517, 390, 591, 572, 505, 68, 218,
                979, 608, 581, 582, 819, 291, 56, 381, 960, 121, 732, 903, 673, 861, 273, 940, 366,
                320, 390, 283, 832, 287, 283, 346, 290, 852, 121, 205, 224, 464, 890, 527, 109,
                999, 464, 933, 702, 576, 160, 176, 941, 781, 252, 72, 318, 930, 440, 697, 556, 495,
                557, 415, 737, 417, 953, 225, 261, 430, 373, 80, 216, 50, 414, 636, 86, 607, 587,
                253, 555, 677, 732, 507, 481, 721, 944, 980, 898, 918, 423, 643, 406, 299, 143,
                148, 242, 138, 303, 257, 688, 773, 315, 148, 930, 141, 952, 84, 755, 939, 564, 749,
                805, 86, 852, 516, 672, 840, 197, 976, 228, 830, 855, 158, 639, 185, 844, 95, 562,
                86, 954, 625, 157, 574, 424, 216, 252, 412, 332, 275, 697, 731, 955, 83, 470, 323,
                575, 152, 240, 322, 644, 904, 610, 640, 712, 996, 38, 327, 756, 975, 212, 990, 821,
                769, 5, 453, 915, 230, 945, 67, 919, 739, 151, 642, 519, 10, 483, 191, 229, 780,
                444, 289, 716, 134, 245, 810, 366, 811, 564, 36, 74, 131, 811, 322, 234, 454, 305,
                272, 78, 223, 771, 591, 679, 857, 4, 965, 192, 762, 649, 329, 281, 699, 20, 915,
                907, 127, 214, 521, 716, 923, 171, 418, 570, 193, 640, 154, 148, 118, 276, 931,
                411, 664, 662, 392, 431, 802, 90, 727, 51, 860, 756, 788, 560, 778, 904, 537, 203,
                614, 448, 598, 765, 587, 405, 235, 530, 685, 566, 529, 199, 770, 239, 722, 877,
                833, 596, 629, 249, 926, 223, 652, 258, 426, 925, 572, 217, 810, 70, 285, 845, 357,
                478, 638, 807, 281, 387, 252, 979, 939, 984, 122, 869, 744, 378, 532, 54, 67, 65,
                72, 721, 84, 985, 112, 718, 91, 906, 17, 852, 87, 970, 162, 787, 500, 930, 961,
                691, 479, 20, 683, 838, 273, 125, 905, 739, 69
            ]),
            838326303
        );
    }

    #[test]
    fn problem_891_ex5() {
        assert_eq!(
            Solution::sum_subseq_widths(vec![
                96, 87, 191, 197, 40, 101, 108, 35, 169, 50, 168, 182, 95, 80, 144, 43, 18, 60,
                174, 13, 77, 173, 38, 46, 80, 117, 13, 19, 11, 6, 13, 118, 39, 80, 171, 36, 86,
                156, 165, 190, 53, 49, 160, 192, 57, 42, 97, 35, 124, 200, 84, 70, 145, 180, 54,
                141, 159, 42, 66, 66, 25, 95, 24, 136, 140, 159, 71, 131, 5, 140, 115, 76, 151,
                137, 63, 47, 69, 164, 60, 172, 153, 183, 6, 70, 40, 168, 133, 45, 116, 188, 20, 52,
                70, 156, 44, 27, 124, 59, 42, 172
            ]),
            136988321
        );
    }
}
